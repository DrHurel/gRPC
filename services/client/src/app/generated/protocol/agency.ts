// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.0
//   protoc               v5.27.2
// source: protocol/agency.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Customer, GPSPosition, Header, Offer, Room } from "./types";

export const protobufPackage = "protocol.agency";

/** Requête pour consulter les disponibilités */
export interface AvailabilityRequest {
  agencyId: string;
  agencyPassword: string;
  startDate: string;
  endDate: string;
  numPeople: number;
}

/** Réponse pour la consultation des disponibilités */
export interface AvailabilityResponse {
  offers: Offer[];
}

/** Requête pour effectuer une réservation */
export interface ReservationRequest {
  agencyId: string;
  agencyLogin: string;
  agencyPassword: string;
  offerId: string;
  customer: Customer | undefined;
}

/** Réponse pour une tentative de réservation */
export interface ReservationResponse {
  success: boolean;
  /** Null si problème */
  confirmationCode: string;
  /** Détails en cas d'échec */
  message: string;
}

export interface FetchRoomPayload {
  startDate?: string | undefined;
  endDate?: string | undefined;
  beds?: number | undefined;
  minsize?: number | undefined;
  minprize?: number | undefined;
  maxprice?: number | undefined;
  gps?: GPSPosition | undefined;
}

export interface FetchRoomResponse {
  header: Header | undefined;
  rooms: Room[];
}

function createBaseAvailabilityRequest(): AvailabilityRequest {
  return { agencyId: "", agencyPassword: "", startDate: "", endDate: "", numPeople: 0 };
}

export const AvailabilityRequest: MessageFns<AvailabilityRequest> = {
  encode(message: AvailabilityRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.agencyId !== "") {
      writer.uint32(10).string(message.agencyId);
    }
    if (message.agencyPassword !== "") {
      writer.uint32(18).string(message.agencyPassword);
    }
    if (message.startDate !== "") {
      writer.uint32(26).string(message.startDate);
    }
    if (message.endDate !== "") {
      writer.uint32(34).string(message.endDate);
    }
    if (message.numPeople !== 0) {
      writer.uint32(40).int32(message.numPeople);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AvailabilityRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAvailabilityRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.agencyId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.agencyPassword = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.startDate = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.endDate = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.numPeople = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AvailabilityRequest {
    return {
      agencyId: isSet(object.agencyId) ? globalThis.String(object.agencyId) : "",
      agencyPassword: isSet(object.agencyPassword) ? globalThis.String(object.agencyPassword) : "",
      startDate: isSet(object.startDate) ? globalThis.String(object.startDate) : "",
      endDate: isSet(object.endDate) ? globalThis.String(object.endDate) : "",
      numPeople: isSet(object.numPeople) ? globalThis.Number(object.numPeople) : 0,
    };
  },

  toJSON(message: AvailabilityRequest): unknown {
    const obj: any = {};
    if (message.agencyId !== "") {
      obj.agencyId = message.agencyId;
    }
    if (message.agencyPassword !== "") {
      obj.agencyPassword = message.agencyPassword;
    }
    if (message.startDate !== "") {
      obj.startDate = message.startDate;
    }
    if (message.endDate !== "") {
      obj.endDate = message.endDate;
    }
    if (message.numPeople !== 0) {
      obj.numPeople = Math.round(message.numPeople);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AvailabilityRequest>, I>>(base?: I): AvailabilityRequest {
    return AvailabilityRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AvailabilityRequest>, I>>(object: I): AvailabilityRequest {
    const message = createBaseAvailabilityRequest();
    message.agencyId = object.agencyId ?? "";
    message.agencyPassword = object.agencyPassword ?? "";
    message.startDate = object.startDate ?? "";
    message.endDate = object.endDate ?? "";
    message.numPeople = object.numPeople ?? 0;
    return message;
  },
};

function createBaseAvailabilityResponse(): AvailabilityResponse {
  return { offers: [] };
}

export const AvailabilityResponse: MessageFns<AvailabilityResponse> = {
  encode(message: AvailabilityResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.offers) {
      Offer.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AvailabilityResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAvailabilityResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.offers.push(Offer.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AvailabilityResponse {
    return { offers: globalThis.Array.isArray(object?.offers) ? object.offers.map((e: any) => Offer.fromJSON(e)) : [] };
  },

  toJSON(message: AvailabilityResponse): unknown {
    const obj: any = {};
    if (message.offers?.length) {
      obj.offers = message.offers.map((e) => Offer.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AvailabilityResponse>, I>>(base?: I): AvailabilityResponse {
    return AvailabilityResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AvailabilityResponse>, I>>(object: I): AvailabilityResponse {
    const message = createBaseAvailabilityResponse();
    message.offers = object.offers?.map((e) => Offer.fromPartial(e)) || [];
    return message;
  },
};

function createBaseReservationRequest(): ReservationRequest {
  return { agencyId: "", agencyLogin: "", agencyPassword: "", offerId: "", customer: undefined };
}

export const ReservationRequest: MessageFns<ReservationRequest> = {
  encode(message: ReservationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.agencyId !== "") {
      writer.uint32(10).string(message.agencyId);
    }
    if (message.agencyLogin !== "") {
      writer.uint32(18).string(message.agencyLogin);
    }
    if (message.agencyPassword !== "") {
      writer.uint32(26).string(message.agencyPassword);
    }
    if (message.offerId !== "") {
      writer.uint32(34).string(message.offerId);
    }
    if (message.customer !== undefined) {
      Customer.encode(message.customer, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReservationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReservationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.agencyId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.agencyLogin = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.agencyPassword = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.offerId = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.customer = Customer.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReservationRequest {
    return {
      agencyId: isSet(object.agencyId) ? globalThis.String(object.agencyId) : "",
      agencyLogin: isSet(object.agencyLogin) ? globalThis.String(object.agencyLogin) : "",
      agencyPassword: isSet(object.agencyPassword) ? globalThis.String(object.agencyPassword) : "",
      offerId: isSet(object.offerId) ? globalThis.String(object.offerId) : "",
      customer: isSet(object.customer) ? Customer.fromJSON(object.customer) : undefined,
    };
  },

  toJSON(message: ReservationRequest): unknown {
    const obj: any = {};
    if (message.agencyId !== "") {
      obj.agencyId = message.agencyId;
    }
    if (message.agencyLogin !== "") {
      obj.agencyLogin = message.agencyLogin;
    }
    if (message.agencyPassword !== "") {
      obj.agencyPassword = message.agencyPassword;
    }
    if (message.offerId !== "") {
      obj.offerId = message.offerId;
    }
    if (message.customer !== undefined) {
      obj.customer = Customer.toJSON(message.customer);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReservationRequest>, I>>(base?: I): ReservationRequest {
    return ReservationRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReservationRequest>, I>>(object: I): ReservationRequest {
    const message = createBaseReservationRequest();
    message.agencyId = object.agencyId ?? "";
    message.agencyLogin = object.agencyLogin ?? "";
    message.agencyPassword = object.agencyPassword ?? "";
    message.offerId = object.offerId ?? "";
    message.customer = (object.customer !== undefined && object.customer !== null)
      ? Customer.fromPartial(object.customer)
      : undefined;
    return message;
  },
};

function createBaseReservationResponse(): ReservationResponse {
  return { success: false, confirmationCode: "", message: "" };
}

export const ReservationResponse: MessageFns<ReservationResponse> = {
  encode(message: ReservationResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.confirmationCode !== "") {
      writer.uint32(18).string(message.confirmationCode);
    }
    if (message.message !== "") {
      writer.uint32(26).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReservationResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReservationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.confirmationCode = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReservationResponse {
    return {
      success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
      confirmationCode: isSet(object.confirmationCode) ? globalThis.String(object.confirmationCode) : "",
      message: isSet(object.message) ? globalThis.String(object.message) : "",
    };
  },

  toJSON(message: ReservationResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.confirmationCode !== "") {
      obj.confirmationCode = message.confirmationCode;
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReservationResponse>, I>>(base?: I): ReservationResponse {
    return ReservationResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReservationResponse>, I>>(object: I): ReservationResponse {
    const message = createBaseReservationResponse();
    message.success = object.success ?? false;
    message.confirmationCode = object.confirmationCode ?? "";
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseFetchRoomPayload(): FetchRoomPayload {
  return {
    startDate: undefined,
    endDate: undefined,
    beds: undefined,
    minsize: undefined,
    minprize: undefined,
    maxprice: undefined,
    gps: undefined,
  };
}

export const FetchRoomPayload: MessageFns<FetchRoomPayload> = {
  encode(message: FetchRoomPayload, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.startDate !== undefined) {
      writer.uint32(10).string(message.startDate);
    }
    if (message.endDate !== undefined) {
      writer.uint32(18).string(message.endDate);
    }
    if (message.beds !== undefined) {
      writer.uint32(24).int32(message.beds);
    }
    if (message.minsize !== undefined) {
      writer.uint32(32).int32(message.minsize);
    }
    if (message.minprize !== undefined) {
      writer.uint32(40).int32(message.minprize);
    }
    if (message.maxprice !== undefined) {
      writer.uint32(48).int32(message.maxprice);
    }
    if (message.gps !== undefined) {
      GPSPosition.encode(message.gps, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FetchRoomPayload {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFetchRoomPayload();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.startDate = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.endDate = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.beds = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.minsize = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.minprize = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.maxprice = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.gps = GPSPosition.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FetchRoomPayload {
    return {
      startDate: isSet(object.startDate) ? globalThis.String(object.startDate) : undefined,
      endDate: isSet(object.endDate) ? globalThis.String(object.endDate) : undefined,
      beds: isSet(object.beds) ? globalThis.Number(object.beds) : undefined,
      minsize: isSet(object.minsize) ? globalThis.Number(object.minsize) : undefined,
      minprize: isSet(object.minprize) ? globalThis.Number(object.minprize) : undefined,
      maxprice: isSet(object.maxprice) ? globalThis.Number(object.maxprice) : undefined,
      gps: isSet(object.gps) ? GPSPosition.fromJSON(object.gps) : undefined,
    };
  },

  toJSON(message: FetchRoomPayload): unknown {
    const obj: any = {};
    if (message.startDate !== undefined) {
      obj.startDate = message.startDate;
    }
    if (message.endDate !== undefined) {
      obj.endDate = message.endDate;
    }
    if (message.beds !== undefined) {
      obj.beds = Math.round(message.beds);
    }
    if (message.minsize !== undefined) {
      obj.minsize = Math.round(message.minsize);
    }
    if (message.minprize !== undefined) {
      obj.minprize = Math.round(message.minprize);
    }
    if (message.maxprice !== undefined) {
      obj.maxprice = Math.round(message.maxprice);
    }
    if (message.gps !== undefined) {
      obj.gps = GPSPosition.toJSON(message.gps);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FetchRoomPayload>, I>>(base?: I): FetchRoomPayload {
    return FetchRoomPayload.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FetchRoomPayload>, I>>(object: I): FetchRoomPayload {
    const message = createBaseFetchRoomPayload();
    message.startDate = object.startDate ?? undefined;
    message.endDate = object.endDate ?? undefined;
    message.beds = object.beds ?? undefined;
    message.minsize = object.minsize ?? undefined;
    message.minprize = object.minprize ?? undefined;
    message.maxprice = object.maxprice ?? undefined;
    message.gps = (object.gps !== undefined && object.gps !== null) ? GPSPosition.fromPartial(object.gps) : undefined;
    return message;
  },
};

function createBaseFetchRoomResponse(): FetchRoomResponse {
  return { header: undefined, rooms: [] };
}

export const FetchRoomResponse: MessageFns<FetchRoomResponse> = {
  encode(message: FetchRoomResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.header !== undefined) {
      Header.encode(message.header, writer.uint32(10).fork()).join();
    }
    for (const v of message.rooms) {
      Room.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FetchRoomResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFetchRoomResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.header = Header.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.rooms.push(Room.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FetchRoomResponse {
    return {
      header: isSet(object.header) ? Header.fromJSON(object.header) : undefined,
      rooms: globalThis.Array.isArray(object?.rooms) ? object.rooms.map((e: any) => Room.fromJSON(e)) : [],
    };
  },

  toJSON(message: FetchRoomResponse): unknown {
    const obj: any = {};
    if (message.header !== undefined) {
      obj.header = Header.toJSON(message.header);
    }
    if (message.rooms?.length) {
      obj.rooms = message.rooms.map((e) => Room.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FetchRoomResponse>, I>>(base?: I): FetchRoomResponse {
    return FetchRoomResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FetchRoomResponse>, I>>(object: I): FetchRoomResponse {
    const message = createBaseFetchRoomResponse();
    message.header = (object.header !== undefined && object.header !== null)
      ? Header.fromPartial(object.header)
      : undefined;
    message.rooms = object.rooms?.map((e) => Room.fromPartial(e)) || [];
    return message;
  },
};

/** Définition des services pour les agences */
export interface AgencyServices {
  /** Service pour consulter les disponibilités des hôtels partenaires */
  CheckAvailability(request: AvailabilityRequest): Promise<AvailabilityResponse>;
  /** Service pour effectuer une réservation */
  MakeReservation(request: ReservationRequest): Promise<ReservationResponse>;
  FetchRooms(request: FetchRoomPayload): Promise<FetchRoomResponse>;
}

export const AgencyServicesServiceName = "protocol.agency.AgencyServices";
export class AgencyServicesClientImpl implements AgencyServices {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || AgencyServicesServiceName;
    this.rpc = rpc;
    this.CheckAvailability = this.CheckAvailability.bind(this);
    this.MakeReservation = this.MakeReservation.bind(this);
    this.FetchRooms = this.FetchRooms.bind(this);
  }
  CheckAvailability(request: AvailabilityRequest): Promise<AvailabilityResponse> {
    const data = AvailabilityRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "CheckAvailability", data);
    return promise.then((data) => AvailabilityResponse.decode(new BinaryReader(data)));
  }

  MakeReservation(request: ReservationRequest): Promise<ReservationResponse> {
    const data = ReservationRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "MakeReservation", data);
    return promise.then((data) => ReservationResponse.decode(new BinaryReader(data)));
  }

  FetchRooms(request: FetchRoomPayload): Promise<FetchRoomResponse> {
    const data = FetchRoomPayload.encode(request).finish();
    const promise = this.rpc.request(this.service, "FetchRooms", data);
    return promise.then((data) => FetchRoomResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
